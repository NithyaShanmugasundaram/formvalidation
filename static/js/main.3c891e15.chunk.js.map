{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","gender","salution","firstname","salutionError","firstnameError","handleChange","e","name","target","value","_this","setState","Object","defineProperty","handleSubmit","preventDefault","validate","console","log","react_default","a","createElement","className","onSubmit","this","onChange","type","style","color","required","Component","App","src_components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAwHeA,oNAnHXC,MAAM,CACHC,OAAO,GACPC,SAAS,GACTC,UAAU,GACVC,cAAc,GACdC,eAAe,MAIlBC,aAAa,SAACC,GAEV,IAAMC,EAAKD,EAAEE,OAAOD,KACdE,EAAOH,EAAEE,OAAOC,MACtBC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAgBL,EAAME,OAG1BK,aAAa,SAACR,GACZA,EAAES,iBACWL,EAAKM,YAElBC,QAAQC,IAAIR,EAAKX,UAGrBiB,SAAS,WACP,IAAIb,EAAc,GAYjB,MATsB,SAApBO,EAAKX,MAAMC,QAAuC,QAAtBU,EAAKX,MAAME,SACvCE,EAAc,0BACc,SAApBO,EAAKX,MAAMC,QAAuC,OAAtBU,EAAKX,MAAME,SAC9CE,EAAc,0BAEW,WAApBO,EAAKX,MAAMC,QAAyC,OAAtBU,EAAKX,MAAME,WAChDE,EAAc,4BAGZA,IACHO,EAAKC,SAAS,CAACR,mBACR,4EASN,OACCgB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,MAAMC,SAAUC,KAAKV,cACrCK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,MACjBG,SAAUD,KAAKnB,aACfqB,KAAK,QACLnB,KAAK,SACLE,MAAM,SAENU,EAAAC,EAAAC,cAAA,sBAEDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,MACjBI,KAAK,QACLnB,KAAK,SACLkB,SAAUD,KAAKnB,aACfI,MAAM,WACNU,EAAAC,EAAAC,cAAA,wBAEDF,EAAAC,EAAAC,cAAA,WACDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,MACjBI,KAAK,WACLD,SAAUD,KAAKnB,aACfE,KAAK,WACLE,MAAM,OACNU,EAAAC,EAAAC,cAAA,oBAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,MAChBI,KAAK,WACLnB,KAAK,WACLE,MAAM,MACNgB,SAAUD,KAAKnB,eAChBc,EAAAC,EAAAC,cAAA,qBAGDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,MACjBI,KAAK,WACLnB,KAAK,WACLE,MAAM,KACNgB,SAAUD,KAAKnB,eACfc,EAAAC,EAAAC,cAAA,oBAEAF,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CAACC,MAAM,QAASJ,KAAKzB,MAAMI,gBAEvCgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SACCC,UAAU,8CACVI,KAAK,OACLnB,KAAK,YACLE,MAAOe,KAAKzB,MAAMG,UAClBuB,SAAUD,KAAKnB,aACfwB,UAAQ,KAKbV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mDAAlB,kBA7GeQ,cCWJC,0LARX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACW,EAAD,cALWF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c891e15.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Form.css\";\n\n\nclass Form extends Component {\n    state={\n       gender:\"\",\n       salution:\"\",\n       firstname:\"\",\n       salutionError:\"\",\n       firstnameError:\"\"\n     \n    }\n    \n    handleChange=(e)=>{\n        \n        const name=e.target.name;\n        const value= e.target.value;\n        this.setState({[name]:value})\n    }\n    \n    handleSubmit=(e)=>{\n      e.preventDefault();\n     const isValid=this.validate();\n     if(isValid){\n      console.log(this.state);  \n     }    \n  }\n  validate=()=>{\n    let salutionError=\"\";\n    \n\n    if(this.state.gender===\"male\"&&this.state.salution===\"mrs\"){\n       salutionError=\"select correct salution\";\n    } else if (this.state.gender===\"male\"&&this.state.salution===\"ms\"){\n        salutionError=\"select correct salution\";\n\n    }else if(this.state.gender===\"female\"&&this.state.salution===\"mr\"){\n      salutionError=\"select correct salution\";\n    }\n     \n     if(salutionError){\n     this.setState({salutionError})\n     return false;\n     }\n     return true;\n  }\n  \n  \n\n  render() { \n    \n      return ( \n       <form className=\"pa4\" onSubmit={this.handleSubmit}>\n       <div className=\"flex items-center mb2\">\n       <input className=\"mr2\" \n       onChange={this.handleChange}\n       type=\"radio\" \n       name=\"gender\"  \n       value=\"male\"\n       />\n       <label>Male</label>\n     </div>\n      <div className=\"flex items-center mb2\">\n       <input className=\"mr2\" \n       type=\"radio\" \n       name=\"gender\"\n       onChange={this.handleChange}\n       value=\"female\"/>\n       <label >Female</label>\n      </div>\n      <div>\n     <div className=\"flex items-center mb2\">\n      <input className=\"mr2\" \n      type=\"checkbox\"  \n      onChange={this.handleChange}\n      name=\"salution\"\n      value=\"mr\"/>\n      <label>Mr</label>\n      \n      </div>\n    <div className=\"flex items-center mb2\">\n      <input className=\"mr2\" \n       type=\"checkbox\" \n       name=\"salution\"\n       value=\"mrs\"\n       onChange={this.handleChange}/>\n      <label >Mrs</label>\n      \n    </div>\n     <div className=\"flex items-center mb2\">\n      <input className=\"mr2\" \n      type=\"checkbox\" \n      name=\"salution\"\n      value=\"ms\"\n      onChange={this.handleChange}/>\n      <label >Ms</label>\n      </div>\n      <div style={{color:\"red\"}}>{this.state.salutionError}</div>\n      </div>\n      <div className=\"measure pa4 black-80\">\n        <label>Enter the name:</label>\n        <input \n         className=\"input-reset ba b--black-20 pa2 mb2 db w-100\" \n         type=\"text\" \n         name=\"firstname\" \n         value={this.state.firstname}\n         onChange={this.handleChange}\n         required\n      \n      />\n      \n    </div>\n    <button className=\"f6 link dim ph3 pv2 mb2 dib white bg-near-black\" >Submit</button>\n</form>\n\n         );\n    }\n}\n \nexport default Form;","import React, { Component } from 'react';\nimport Form from './components/Form';\n\nimport './App.css';\nclass App extends Component {\n  \n  render() { \n    return (\n      <div className=\"App\">\n       <Form/>\n      </div>\n    );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}